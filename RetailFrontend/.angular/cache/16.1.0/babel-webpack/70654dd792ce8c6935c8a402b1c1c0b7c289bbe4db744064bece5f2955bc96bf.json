{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nclass DataGatewayService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:8080';\n    this.departmentList = ['Shirts', 'Shoes', 'Accessories', 'Pants'];\n  }\n  getLoginStatus(loginData) {\n    console.log(loginData);\n    this.http.post(`${this.apiUrl}/api/auth/login`, loginData).subscribe(resultData => {\n      //console.log(resultData);\n      if (resultData.message == \"Email does not exist\") {\n        alert(\"Email does not exist\");\n      } else if (resultData.message == \"Login Success\") {\n        this.userId = resultData.id;\n        this.userFirstName = resultData.fullName;\n        this.userLastName = resultData.fullName;\n        this.userRole = resultData.role;\n        this.userPhoneNumber = resultData.userPhoneNumber;\n        this.userAddress = resultData.userAddress;\n        this.isLoggedIn = true;\n        //console.log(this.isLoggedIn +  \"   hgsadjhgshdjfgh\");\n        /*console.log(resultData.fullName);\n        console.log(resultData.id);\n        console.log(resultData.role);*/\n        this.router.navigateByUrl('/home');\n      } else {\n        alert(\"Incorrect email or password\");\n      }\n    });\n  }\n  getAccountRegistered(accountRegistration) {\n    console.log(accountRegistration);\n    return this.http.post(`${this.apiUrl}/api/auth/register`, accountRegistration, {\n      responseType: 'text'\n    });\n  }\n  logout() {\n    this.userId = undefined;\n    this.userFirstName = undefined;\n    this.userLastName = undefined;\n    this.userRole = undefined;\n    this.userPhoneNumber = undefined;\n    this.userAddress = undefined;\n    this.isLoggedIn = false;\n    this.router.navigateByUrl('/login');\n  }\n}\nDataGatewayService.ɵfac = function DataGatewayService_Factory(t) {\n  return new (t || DataGatewayService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nDataGatewayService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataGatewayService,\n  factory: DataGatewayService.ɵfac,\n  providedIn: 'root'\n});\nexport { DataGatewayService };","map":{"version":3,"names":["HttpHeaders","httpOptions","headers","DataGatewayService","constructor","http","router","apiUrl","departmentList","getLoginStatus","loginData","console","log","post","subscribe","resultData","message","alert","userId","id","userFirstName","fullName","userLastName","userRole","role","userPhoneNumber","userAddress","isLoggedIn","navigateByUrl","getAccountRegistered","accountRegistration","responseType","logout","undefined","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\GenSpark\\RetailOrder W13-14\\CaseStudyW13-14\\RetailFrontend\\src\\app\\services\\data-gateway.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { LoginInfo } from './LoginInfo';\r\nimport { User } from './User';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n  }),\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataGatewayService {\r\n  private apiUrl = 'http://localhost:8080';\r\n  //private apiUrl = '';\r\n  userId: undefined | number;\r\n  userFirstName: undefined | string;\r\n  userLastName: undefined | string;\r\n  userRole: undefined | string;\r\n  userPhoneNumber: undefined | string;\r\n  userAddress: undefined | string;\r\n  departmentList: string[] = ['Shirts', 'Shoes', 'Accessories', 'Pants'];\r\n  isLoggedIn!: boolean;\r\n\r\n  constructor(private http: HttpClient, private router: Router) { }\r\n\r\n  getLoginStatus(loginData: LoginInfo) {\r\n    console.log(loginData);\r\n\r\n    this.http.post(`${this.apiUrl}/api/auth/login`, loginData).subscribe((resultData: any) => {\r\n    //console.log(resultData);\r\n    \r\n    if (resultData.message == \"Email does not exist\") {\r\n      alert(\"Email does not exist\");\r\n    }   \r\n    else if (resultData.message == \"Login Success\") {\r\n      this.userId = resultData.id;\r\n      this.userFirstName = resultData.fullName;\r\n      this.userLastName = resultData.fullName;\r\n      this.userRole = resultData.role;\r\n      this.userPhoneNumber = resultData.userPhoneNumber;\r\n      this.userAddress = resultData.userAddress;\r\n      this.isLoggedIn = true;\r\n      //console.log(this.isLoggedIn +  \"   hgsadjhgshdjfgh\");\r\n      /*console.log(resultData.fullName);\r\n      console.log(resultData.id);\r\n      console.log(resultData.role);*/\r\n      this.router.navigateByUrl('/home');\r\n    }\r\n    else {\r\n      alert(\"Incorrect email or password\");\r\n    }  \r\n  });\r\n  }\r\n\r\n  getAccountRegistered(accountRegistration: User): Observable<any> {\r\n    console.log(accountRegistration);\r\n    return this.http.post(`${this.apiUrl}/api/auth/register`, accountRegistration, {responseType: 'text'});\r\n  }\r\n\r\n  logout() {\r\n    this.userId = undefined;\r\n    this.userFirstName = undefined;\r\n    this.userLastName = undefined;\r\n    this.userRole = undefined;\r\n    this.userPhoneNumber = undefined;\r\n    this.userAddress = undefined;\r\n    this.isLoggedIn = false;\r\n    this.router.navigateByUrl('/login');\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAO9D,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIF,WAAW,CAAC;IACvB,cAAc,EAAE;GACjB;CACF;AAED,MAGaG,kBAAkB;EAY7BC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAX5C,KAAAC,MAAM,GAAG,uBAAuB;IAQxC,KAAAC,cAAc,GAAa,CAAC,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC;EAGN;EAEhEC,cAAcA,CAACC,SAAoB;IACjCC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;IAEtB,IAAI,CAACL,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACN,MAAM,iBAAiB,EAAEG,SAAS,CAAC,CAACI,SAAS,CAAEC,UAAe,IAAI;MACzF;MAEA,IAAIA,UAAU,CAACC,OAAO,IAAI,sBAAsB,EAAE;QAChDC,KAAK,CAAC,sBAAsB,CAAC;OAC9B,MACI,IAAIF,UAAU,CAACC,OAAO,IAAI,eAAe,EAAE;QAC9C,IAAI,CAACE,MAAM,GAAGH,UAAU,CAACI,EAAE;QAC3B,IAAI,CAACC,aAAa,GAAGL,UAAU,CAACM,QAAQ;QACxC,IAAI,CAACC,YAAY,GAAGP,UAAU,CAACM,QAAQ;QACvC,IAAI,CAACE,QAAQ,GAAGR,UAAU,CAACS,IAAI;QAC/B,IAAI,CAACC,eAAe,GAAGV,UAAU,CAACU,eAAe;QACjD,IAAI,CAACC,WAAW,GAAGX,UAAU,CAACW,WAAW;QACzC,IAAI,CAACC,UAAU,GAAG,IAAI;QACtB;QACA;;;QAGA,IAAI,CAACrB,MAAM,CAACsB,aAAa,CAAC,OAAO,CAAC;OACnC,MACI;QACHX,KAAK,CAAC,6BAA6B,CAAC;;IAExC,CAAC,CAAC;EACF;EAEAY,oBAAoBA,CAACC,mBAAyB;IAC5CnB,OAAO,CAACC,GAAG,CAACkB,mBAAmB,CAAC;IAChC,OAAO,IAAI,CAACzB,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACN,MAAM,oBAAoB,EAAEuB,mBAAmB,EAAE;MAACC,YAAY,EAAE;IAAM,CAAC,CAAC;EACxG;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACd,MAAM,GAAGe,SAAS;IACvB,IAAI,CAACb,aAAa,GAAGa,SAAS;IAC9B,IAAI,CAACX,YAAY,GAAGW,SAAS;IAC7B,IAAI,CAACV,QAAQ,GAAGU,SAAS;IACzB,IAAI,CAACR,eAAe,GAAGQ,SAAS;IAChC,IAAI,CAACP,WAAW,GAAGO,SAAS;IAC5B,IAAI,CAACN,UAAU,GAAG,KAAK;IACvB,IAAI,CAACrB,MAAM,CAACsB,aAAa,CAAC,QAAQ,CAAC;EACrC;;AAzDWzB,kBAAkB,C;mBAAlBA,kBAAkB,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAlBpC,kBAAkB,C;SAAlBA,kBAAkB;EAAAqC,OAAA,EAAlBrC,kBAAkB,CAAAsC,IAAA;EAAAC,UAAA,EAFjB;AAAM;SAEPvC,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}